import os
import tempfile
from fastapi import HTTPException
from latex_generator import generate_latex_document
from models import ResumeData

def compile_latex_to_pdf(resume_data: ResumeData, output_dir: str, filename: str = "resume") -> str:
    """Compile resume data to PDF using PyLaTeX"""
    try:
        # Generate PyLaTeX document
        doc = generate_latex_document(resume_data)
        
        # Generate PDF directly with PyLaTeX
        pdf_path = os.path.join(output_dir, f"{filename}.pdf")
        doc.generate_pdf(
            filepath=os.path.join(output_dir, filename),
            clean_tex=False,  # Keep .tex file for debugging
            compiler='pdflatex'  # Use pdflatex instead of Tectonic
        )
        
        if not os.path.exists(pdf_path):
            raise HTTPException(
                status_code=500,
                detail="PDF file was not generated by PyLaTeX"
            )
            
        return pdf_path
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"LaTeX compilation failed: {str(e)}"
        )

def check_latex_engine() -> bool:
    """Check if a LaTeX engine is available (pdflatex, xelatex, etc.)"""
    import subprocess
    try:
        # Check for pdflatex
        result = subprocess.run(['pdflatex', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            return True
        
        # Check for xelatex as fallback
        result = subprocess.run(['xelatex', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            return True
            
        return False
    except FileNotFoundError:
        return False

# Backward compatibility - keep old function name but update implementation
def check_tectonic() -> bool:
    """Check if LaTeX engine is available (renamed for compatibility)"""
    return check_latex_engine()